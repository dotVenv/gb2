/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 ./gb2/gb/static/gb/static/glb/sitting_anim.glb 
*/

import React, { useEffect } from 'react';
import * as THREE from "three";
import { useGraph, useLoader, useFrame } from '@react-three/fiber';
import { useGLTF, useAnimations } from '@react-three/drei';
import { SkeletonUtils } from 'three-stdlib';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { signal } from '@preact/signals-react';

useGLTF.preload('staticfiles/gb/static/glb/sitting_anim.glb');



const hasLanded = signal(null);
const PlayerSittingAnim = ({props, animPlaying}) =>{

  const group = React.useRef();
  const { scene, animations } = useLoader(GLTFLoader,'staticfiles/gb/static/glb/sitting_anim.glb');
  const { actions } = useAnimations(animations, group);
  let mixer = new THREE.AnimationMixer(scene);

  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  useFrame((state, delta) => {
    mixer.update(delta);
    // console.log(ca);
  });
  useEffect(() => {
    
      if (animPlaying) {
      Object.values(actions).forEach(action => {
          action.stop(); // Stop all actions
      });
      if (actions[animPlaying]) {
          actions[animPlaying].reset().fadeIn(0.5).play();
          
      }
  }
}, [animPlaying, actions]);

 
  
  
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.02}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh name="Alpha_Joints" geometry={nodes.Alpha_Joints.geometry} material={materials.Alpha_Joints_MAT} skeleton={nodes.Alpha_Joints.skeleton} />
          <skinnedMesh name="Alpha_Surface" geometry={nodes.Alpha_Surface.geometry} material={materials.Alpha_Body_MAT} skeleton={nodes.Alpha_Surface.skeleton} />
        </group>
      </group>
    </group>
  );
};

export {PlayerSittingAnim};

